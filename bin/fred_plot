#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);
use Cwd;

my $cwd = getcwd();

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $gnuplot = $ENV{FRED_GNUPLOT};
die "$0: no gnuplot\n" if (not $gnuplot or (not -x $gnuplot));

my $commandline = "fred_plot @ARGV";
my @data = ();

my %titles = ( AR => "Attack Rate",
	       ARs => "Symptomatic Attack Rate",
	       C => "Incidence",
	       Cs => "Symptomatic Incidence",
	       Cls => "Classroom Transmissions",
	       E => "Exposed",
	       H => "Household Transmissions",
	       I => "Infectious",
	       Is => "Symptomatics",
	       M => "Immune",
	       N => "Pop Size",
	       P => "Prevalence",
	       Off => "Office Transmissions",
	       R => "Recovered",
	       RR => "Reproductive Rate",
	       S => "Susceptible",
	       Sch => "School Transmissions",
	       SM => "Seasonality Mult",
	       Wrk => "Workplace Transmissions",
	       X => "Imported Transmissions",
	       small => "Presenteeism at Small Workplaces",
	       med => "Presenteeism at Medium Workplaces",
	       large => "Presenteeism at Large Workplaces",
	       xlarge => "Presenteeism at Xlarge Workplaces",
);

my @keys = ();
my @varlist = ();
my $xmin = "0";
my $xmax = "*";
my $ymin = "0";
my $ymax = "*";
my $display = 1;
my $errorbars;
my $title = "FRED Simulation";
my $weekly;
my $all;
my $font = "Helvetica";
my $fontsize = "12";
my $boxes;
my $normalize;
my $scale = 100000;
my $smooth;
my $legend;
my $linewidth = 0;
my $xlabel = "Days";
my $ylabel = "Individuals";
my $xtics = "";
my $outfile = "";
my $help = "";
my $show_year = 0;
my $show_vars = 0;
my $run = 0;
my $total = 0;
my $make_png = 0;
my $opt_result = GetOptions(
			    "a" => \$all,
			    "all" => \$all,
			    "b" => \$boxes,
			    "bars" => \$boxes,
			    "boxes" => \$boxes,
			    "histogram" => \$boxes,
			    "h" => \$help,
			    "help" => \$help,
			    "d=i" => \$display,
			    "display=i" => \$display,
			    "e" => \$errorbars,
			    "f=s" => \$font,
			    "k=s" => \@keys,
			    "lw=f" => \$linewidth,
			    "T=s" => \$title,
			    "t=s" => \$title,
			    "v=s" => \@varlist,
			    "V" => \$show_vars,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			    "errorbars" => \$errorbars,
			    "font=s" => \$font,
			    "F=f" => \$fontsize,
			    "fsize=f" => \$fontsize,
			    "keys=s" => \@keys,
			    "legend=s" => \$legend,
			    "n" => \$normalize,
			    "normalize" => \$normalize,
			    "r=i" => \$run,
			    "s=f" => \$scale,
			    "scale=f" => \$scale,
			    "smooth" => \$smooth,
			    "title=s" => \$title,
			    "total" => \$total,
			    "var=s" => \@varlist,
			    "w" => \$weekly,
			    "weekly" => \$weekly,
			    "xmin=i" => \$xmin,
			    "xmax=i" => \$xmax,
			    "Xmax=i" => \$xmax,
			    "ymin=i" => \$ymin,
			    "ymax=i" => \$ymax,
			    "Ymax=i" => \$ymax,
			    "ylabel=s" => \$ylabel,
			    "xlabel=s" => \$xlabel,
			    "xtics=i" => \$xtics,
			    "year=i" => \$show_year,
			    "o=s" => \$outfile,
			    "output=s" => \$outfile,
			    "png" => \$make_png,
			   );

my $usage = <<EOH;
usage: fred_plot -k key -v var [ options ], where options include:
       -a: show all individual runs.
       -b: plot bar charts instead of curves.
       -d 0/1 : display the image file (default = 1).
       -e: include errorbars on plot.
       -f font : use the named font.
       -F fontsize: specify font size.
       -h: print this help message.
       -k key [ -k key ... ]: keys of jobs to plot.
       -n: scale y-axis to show counts per <s> people.
       -o outfile: send output image to indicated file.
       -r <n>: show individual run <n>.
       -s <s> : scale factor for normalization.
       -t title: Title to appear on plot.
       -v var [ -v var ... ]: variable to be plotted.
       -V : list available plotable variables.
       -w: plot variables averaged over epi weeks.
       -x xmin: min value for x-axis.
       -X xmax: max value for x-axis.
       -y ymin: min value for y-axis.
       -Y ymax: max value for y-axis.
       --xtics <n>: put xtics every <n> units.
       --xlabel <s>: label the x axis with "s".
       --ylabel <s>: label the y axis with "s".
       --year 1: show year in xtics.
       --png 0/1: output to png rather than pdf (default = 0).
EOH

die $usage if $help;
die $usage if not @keys;
die $usage if not @varlist;

# resolve conflicting options

# if attack rates are requested, disable smoothing and weekly sums
for my $v (@varlist) {
 if ($v =~ /AR/) {  
   $smooth = 0;
   $weekly = 0;
   $legend = "top right";
 }
}

# bar charts overides smoothing
$smooth = 0 if $boxes;

# check keys
my $bindir = "$FRED/bin";
my %id_of_key = ();
my $idstr = "";
for my $key (@keys) {
  my $id = `$bindir/fred_id $key`;
  chomp $id;
  die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";
  $idstr.= "-$id";

  my $status = `$bindir/fred_status -k $key`;
  chomp $status;
  $status =~ s/\s.*//;
  die "$0 bad status: $status\n" if $status ne "FINISHED";
  $id_of_key{$key} = $id;
}

show_vars() if $show_vars;

# create a good name for the plt and pdf files
my $varstr = join "-", @varlist;
my $pltfile = "plot-$varstr.plt";
if (not $outfile) {
  if ($make_png == 0) {
    # user did not supply a name as -o option
    $outfile = "plot-$varstr.pdf";
  }
  else {
    # user did not supply a name as -o option
    $outfile = "plot-$varstr.png";
  }
}
else {
  if ($make_png == 1) {
    # user did not supply a name as -o option
    $outfile = "$outfile.png";
  }
  else {
    # user did not supply a name as -o option
    $outfile = "$outfile.pdf";
  }
  $pltfile = "plot-$outfile.plt";
}

for my $v (@varlist) {
  for my $key (@keys) {
    get_data($key, $v, 0) if ($all or not $run);
    if ($all) {
      my $runs = get_runs($key);
      for my $run_number (1..$runs) {
	get_data($key, $v, $run_number);
      }
    }
    elsif ($run) {
      get_data($key, $v, $run);
    }
  }
}

my $date = scalar localtime;
my $titlefontsize = $fontsize + 4;
my $terminal;
open FH, ">$pltfile";
if ($make_png == 1) {
  $terminal = "png font '$font,$fontsize' linewidth 1";
}
else {
  $terminal = "pdf font '$font,$fontsize' linewidth 3 size 7,5";
}

my $setkey = "set key at graph 0.96, graph 0.96 right";

print FH <<"EOF";
#!$gnuplot
#
# file: $pltfile
# created: $date
#
# command line used to generate this file:
# $commandline
#
set terminal $terminal
set title \"$title\" font \"$font,$titlefontsize\"
set output \"$outfile\"
$setkey
set grid
set xtics nomirror out $xtics
set ytics out nomirror
EOF

if ($normalize) {
  if ($scale == 1) {
    $ylabel = "Fraction of Population";
  }
  elsif ($scale == 100) {
    $ylabel = "Percent";
  }
  else {
    $ylabel = "Per $scale";
  }
}

for my $v (@varlist) {
 if ($v =~ /AR/) {  
   $ylabel = "Percent Infected";
   $ymax = 100 if $ymax eq "*";
   $ymin = 0;
 }
 if ($v =~ /Age/) {
   $ylabel = "Per 100,000";
 }
}

$xlabel = "Week" if $weekly;

print FH "set xrange [$xmin:$xmax]\n";
print FH "set yrange [$ymin:$ymax]\n";
print FH "set datafile separator ','\n";
print FH "set xlabel \"$xlabel\" offset 0,0.5\n";
print FH "set ylabel \"$ylabel\" offset 1.2,0\n";
print FH "set xtics rotate by 270\n" if $weekly;
print FH "set key $legend\n" if $legend;
print FH "set bars 2.0 front\n";

if ($boxes) {
  my $vn = scalar @varlist;
  print FH "\n# set up boxes\n";
  print FH "vars = $vn\n";
  print FH "fredkeys = ", scalar @keys, "\n";
  print FH "nplots = vars * fredkeys\n";
  print FH "total_relative_boxwidths = 0.8\n";
  print FH "dx = total_relative_boxwidths/(1.0*nplots)\n";
  print FH "set boxwid (total_relative_boxwidths/(1.0*nplots)) relative\n";
  print FH "set style fill solid 1.0 border 0\n";
  print FH "get_shift(n) = dx*(n-0.5*nplots-0.5)\n";
  # print FH "set xtics offset graph (-1.0*get_shift(1)), 0\n";
  print FH "\n";
}

if ($weekly) {
  $xtics = 1 if not $xtics;
  my $xlab_start = 6;
  $xlab_start = 0 if $show_year;
  print FH "get_xlabel(s) = (((s[6:*]+0)\%$xtics)==0)?sprintf('\%s',s[$xlab_start:*]):''\n";
  print FH "unset grid\n" if $xtics > 1;
  print FH "\n";
}

my $n = 0;
for my $v (@varlist) {
  my $titlevar = $v;
  $titlevar = $titles{$v} if exists $titles{$v};
  for my $key (@keys) {
    my $ptitle = "$titlevar";
    $ptitle = "$ptitle-$key" if scalar @keys > 1;
    my $plotcmd = ($n == 0);
    $n++;
    print FH "plot \\\n" if $plotcmd;
    print FH plot_command($ptitle,$n,0) if ($all or not $run);
    $plotcmd = 0;
    if ($all) {
      my $runs = get_runs($key);
      for my $run_number (1..$runs) {
	print FH plot_command("",$n,$run_number);
      }
    }
    elsif ($run) {
      print FH plot_command("",$n,$run);
    }
  }
}
print FH "\n";
print FH "$_\n" for @data;
print FH "\n";
close FH;

system "chmod +x $pltfile";
if(system ($pltfile) != 0) {
	print "Trying " . $cwd . "/" . $pltfile . "\n";
	system ($cwd . "/" . $pltfile);
} 
print "fred_plot: source_file = $pltfile  image_file = $outfile\n";

if($^O eq "darwin") {
	system ("open $outfile") if $display;
}
else {
	system ("xdg-open $outfile") if $display;
}

exit;

sub get_data {
  my ($key, $var, $run) = @_;
  my $tmpfile = ".tmpfile";
  my $week = "";
  $week = "--weekly" if $weekly;
  my $options = "-k $key -v $var";
  $options .= " --weekly" if $weekly;
  $options .= " -r $run" if $run > 0;
  $options .= " --total" if $total;
  system "fred_csv $options > $tmpfile";
  if (not -s $tmpfile) {
    print "$0: error in get_data\n";
    exit;
  }
  my @tmpdata = ();
  open IN, $tmpfile;
  while (<IN>) {
    chomp;
    push @tmpdata, $_;
  }
  close IN;
  push @tmpdata, "EOF";
  push @data, @tmpdata;
  push @data, @tmpdata if $errorbars and $run == 0;
  unlink $tmpfile;
}

sub plot_command {
  my ($ptitle,$n,$run) = @_;
  $smooth = 0 if $weekly;

  # x-axis value
  my $x = "(\$1):";
  $x = "(\$0):" if $weekly;
  $x = "(\$0+get_shift($n)):" if $boxes;

  # y-axis value
  # daily values
  my $y = $run ? "\$8" :"\$9";
  if ($total) {
    $y = $run ? "\$9" : "\$11";
  }

  if ($weekly) {
    $y = $run ? "\$5" :"\$6";
    if ($total) {
      $y = $run ? "(7*\$6)" : "(7*\$8)";
    }
  }

  # errorbars
  my $e = "";
  if ($errorbars and $run == 0) {
    $e = $weekly? "\$7" : "\$10";
  }

  # divide by pop size to normalize
  if ($normalize) {
    my $mult = $weekly ? "(1.0*$scale/\$4)" : "(1.0*$scale/\$7)";
    $y = "$y*$mult";
    $e = "$e*$mult";
  }

  # xtics
  my $xtic = "";
  $xtic = ":xtic(\$0>1?get_xlabel(strcol(1)):'')" if $weekly and $n == 1;

  # title
  my $title = "title '$ptitle'";
  $title = "notitle" if $run > 0;

  # line width
  my $lw = "lt $n lw 5";
  if ($linewidth) {
    $lw = "lt $n lw $linewidth";
  }
  if ($run == 0 and $all) {
    $lw = "lt -1 lw 3";
    $lw = "lt -1 lw $linewidth" if $linewidth;
  }
  $lw = "lt $run lw 1" if $run > 0;
  $lw = "" if $boxes;

  # plot with lines?
  my $w = "with lines";
  # $w = "smooth csplines" if $smooth or $weekly;
  $w = "with boxes" if $boxes;

  my $spec = "";
  $spec = "'-' using $x($y)$xtic $title $w $lw, \\\n";
  $spec .= "'-' using $x($y):($e) notitle wi errorbars lt -1 lw 2, \\\n" if $errorbars and $run == 0;
  return $spec;
}

sub get_runs {
  my $key = shift;
  my $id = $id_of_key{$key};
  my $runs = `cat $FREDRESULTS/JOB/$id/META/RUNS`;
  chomp $runs;
  return $runs;
}

sub show_vars {
  my %plotvars = ();
  for my $key (@keys) {
    my $id = $id_of_key{$key};
    my $outpath = "$FREDRESULTS/JOB/$id/DATA/OUT/";
    my $head = `head $outpath/out1.txt`;
    $head =~ s/\n.*//s;
    # print "$head\n";
    my @a = split " ", $head;
    for (my $i = 0; $i < scalar @a; $i = $i + 2) {
      $plotvars{$a[$i]} = 1;
    }
  }
  for my $v (sort keys %plotvars) {
    print "$v\n";
  }
  exit;
}
